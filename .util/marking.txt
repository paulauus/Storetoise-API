============================= test session starts ==============================
platform linux -- Python 3.12.4, pytest-8.3.2, pluggy-1.5.0
rootdir: /home/runner/work/Assessment-Networking-Week-1/Assessment-Networking-Week-1
collected 56 items

test_challenge_1.py ..............                                       [ 25%]
test_challenge_2.py .............                                        [ 48%]
test_challenge_3.py .F...........F                                       [ 73%]
test_challenge_4.py FF.....FFFFFFFF                                      [100%]

======================== 12 failed, 44 passed in 19.94s ========================
************* Module storetoise_1
storetoise_1.py:10:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:11:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:12:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:13:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:17:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:18:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:19:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:20:0: W0311: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)
storetoise_1.py:21:0: W0311: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)
storetoise_1.py:22:0: W0311: Bad indentation. Found 6 spaces, expected 12 (bad-indentation)
storetoise_1.py:23:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:24:0: W0311: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)
storetoise_1.py:25:0: W0311: Bad indentation. Found 6 spaces, expected 12 (bad-indentation)
storetoise_1.py:31:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
storetoise_1.py:32:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
storetoise_1.py:33:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
storetoise_1.py:37:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:41:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:42:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:43:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:44:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:45:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:48:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:49:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:50:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:51:0: W0311: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)
storetoise_1.py:21:8: W0622: Redefining built-in 'id' (redefined-builtin)
storetoise_1.py:28:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_1.py:44:2: W0621: Redefining name 'args' from outer scope (line 48) (redefined-outer-name)
************* Module storetoise_2
storetoise_2.py:21:12: W0622: Redefining built-in 'id' (redefined-builtin)
storetoise_2.py:28:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_2.py:35:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_2.py:61:4: W0621: Redefining name 'args' from outer scope (line 66) (redefined-outer-name)
************* Module storetoise_3
storetoise_3.py:9:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_3.py:24:12: W0622: Redefining built-in 'id' (redefined-builtin)
storetoise_3.py:31:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_3.py:38:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_3.py:75:4: W0621: Redefining name 'args' from outer scope (line 80) (redefined-outer-name)
************* Module storetoise_4
storetoise_4.py:9:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_4.py:24:12: W0622: Redefining built-in 'id' (redefined-builtin)
storetoise_4.py:31:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_4.py:38:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
storetoise_4.py:80:4: W0621: Redefining name 'args' from outer scope (line 85) (redefined-outer-name)
storetoise_4.py:103:36: E0602: Undefined variable 'loaded_data_data' (undefined-variable)
storetoise_4.py:104:31: E0602: Undefined variable 'id_url' (undefined-variable)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_3:[5:69]
==storetoise_4:[5:65]
BASE_URL = "http://storetoise-lb-1365832025.eu-west-2.elb.amazonaws.com"


def load_storetoise_data(url: str) -> dict:
    """Loads the JSON data from the base URL."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # Raises an HTTPError for bad responses
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data from {url}: {e}")


def print_storage_ids(data: dict, number: int | None = None) -> None:
    """Prints the storage IDs listed for a user."""
    storage_ids = data["ids"]
    if number:
        limit = min(number, len(storage_ids))
        for id in sorted(storage_ids[:limit]):
            print(id)
    else:
        for id in sorted(storage_ids):
            print(id)


def valid_value(input_num: str) -> int:
    """Checks that the chosen number for messages display is a valid number."""
    if input_num.isdigit() and 0 <= int(input_num) <= 1000:
        return int(input_num)
    print("Number must be an integer between 0 and 1000.")


def valid_storage_id(input_storage_id: str) -> int:
    """Checks that the given storage ID is a valid number."""
    if input_storage_id.isdigit() and len(input_storage_id) == 3:
        return int(input_storage_id)
    print("Storage ID must be a three-digit integer.")


def valid_message(message: str) -> str:
    """Checks the provided message is in a valid format."""
    if len(message) > 140:
        print("Message must be 140 characters or fewer.")

    if not all(char.islower() or char.isspace() for char in message):
        print("Message must consist only of lowercase letters and spaces.")

    return message


def post_message(url: str, message: str) -> None:
    """Posts a message to the given URL."""
    try:
        response = requests.post(url, json={"message": message}, timeout=10)
        response.raise_for_status()  # Ensure we catch HTTP errors
    except requests.exceptions.RequestException as e:
        print(f"Error posting message to {url}: {e}")


def command_line_interface_input():
    """
    Takes input from the user with the username.
    Can specify the number of messages to print.
    """ (duplicate-code)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_3:[74:95]
==storetoise_4:[79:101]
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = command_line_interface_input()
    user_url = f"{BASE_URL}/storage/{args.username}"
    loaded_data = load_storetoise_data(user_url)
    print_storage_ids(loaded_data, args.number)

    if args.storage:
        storage_url = f"{user_url}/{args.storage}"
        storage_data = load_storetoise_data(storage_url)

        if args.message:
            messages = storage_data.get("messages", [])
            if len(messages) >= 10:
                print("Cannot add more than 10 messages to a storage ID.")

            post_message(storage_url, args.message)
            print(f"Message added to Storage ID {args.storage} successfully.")
 (duplicate-code)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_2:[17:43]
==storetoise_3:[20:46]
    storage_ids = data["ids"]
    if number:
        limit = min(number, len(storage_ids))
        for id in sorted(storage_ids[:limit]):
            print(id)
    else:
        for id in sorted(storage_ids):
            print(id)


def valid_value(input_num: str) -> int:
    """Checks that the chosen number for messages display is a valid number."""
    if input_num.isdigit() and 0 <= int(input_num) <= 1000:
        return int(input_num)
    print("Number must be an integer between 0 and 1000.")


def valid_storage_id(input_storage_id: str) -> int:
    """Checks that the given storage ID is a valid number."""
    if input_storage_id.isdigit() and len(input_storage_id) == 3:
        return int(input_storage_id)
    print("Storage ID must be a three-digit integer.")


def display_messages(data: dict, storage_id: int) -> None:
    """Prints messages stored under the given storage ID.""" (duplicate-code)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_2:[60:70]
==storetoise_3:[74:85]
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = command_line_interface_input()
    user_url = f"{BASE_URL}/storage/{args.username}"
    loaded_data = load_storetoise_data(user_url)
    print_storage_ids(loaded_data, args.number)

    if args.storage: (duplicate-code)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_1:[43:51]
==storetoise_2:[60:69]
  args = parser.parse_args()
  return args

if __name__ == "__main__":
  args = command_line_interface_input()
  user_url = f"{BASE_URL}/storage/{args.username}"
  loaded_data = load_storetoise_data(user_url)
  print_storage_ids(loaded_data, args.number) (duplicate-code)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_3:[69:74]
==storetoise_4:[73:78]
    parser = ArgumentParser()
    parser.add_argument("--username", "-u", required=True)
    parser.add_argument("--number", "-n", type=valid_value)
    parser.add_argument("--storage", "-s", type=valid_storage_id)
    parser.add_argument("--message", "-m", type=valid_message) (duplicate-code)
storetoise_4.py:1:0: R0801: Similar lines in 2 files
==storetoise_1:[17:22]
==storetoise_2:[17:22]
  storage_ids = data["ids"]
  if number:
    limit = min(number, len(storage_ids))
    for id in sorted(storage_ids[:limit]):
      print(id) (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 7.12/10 (previous run: 7.12/10, +0.00)

